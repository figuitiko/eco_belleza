<?php

namespace App\Controller\Admin;

use App\Entity\User;
use App\Repository\UserRepository;
use Doctrine\ORM\EntityManagerInterface;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\ArrayField;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\BooleanField;
use EasyCorp\Bundle\EasyAdminBundle\Field\EmailField;
use EasyCorp\Bundle\EasyAdminBundle\Field\FormField;
use EasyCorp\Bundle\EasyAdminBundle\Field\IntegerField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use EasyCorp\Bundle\EasyAdminBundle\Router\CrudUrlGenerator;
use Symfony\Component\Form\Extension\Core\Type\PasswordType;
use Symfony\Component\Form\Extension\Core\Type\RepeatedType;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
use Symfony\Component\Validator\Validator\ValidatorInterface;

class UserCrudController extends AbstractCrudController
{

    /**
     * @var UserPasswordEncoderInterface
     */
    private $userPasswordEncoder;
    /**
     * @var ValidatorInterface
     */
    private $validator;
    /**
     * @var CrudUrlGenerator
     */
    private $crudUrlGenerator;
    /**
     * @var UserRepository
     */
    private $userRepository;

    public function __construct(UserPasswordEncoderInterface $userPasswordEncoder, ValidatorInterface $validator,
                                CrudUrlGenerator $crudUrlGenerator, UserRepository $userRepository)
    {

        $this->userPasswordEncoder = $userPasswordEncoder;
        $this->validator = $validator;
        $this->crudUrlGenerator = $crudUrlGenerator;
        $this->userRepository = $userRepository;
    }
    public static function getEntityFqcn(): string
    {
        return User::class;
    }
    public function configureCrud(Crud $crud): Crud
    {
        return $crud
            ->setEntityLabelInSingular('Usuario')
            ->setEntityLabelInPlural('Usuarios')
            ->setSearchFields(['id', 'name', 'email']);
    }
    public function configureFields(string $pageName): iterable
    {

        $id = IntegerField::new('id', 'ID');
        $name = TextField::new('name', 'nombre');
        $email = EmailField::new('email', 'Correo Electrónico');
        $password = TextField::new('password', 'Contraseña')->setFormType(RepeatedType::class)
            ->setFormTypeOptions(['type'=>PasswordType::class,
                'invalid_message'=>'Las dos contraseñas deben coincidir',
                'first_options'=>[
                    'label'=>'Contraseña'
                ],
                'second_options'=>[
                    'label'=>'Confirmar contraseña'
                ]  ]);

        $roles = ArrayField::new('roles');
        $courses = AssociationField::new('userCourses', 'Cursos');


        if (Crud::PAGE_INDEX === $pageName) {
            return [$id,$name, $email];
        }

            return [
                FormField::addPanel('Información Basica'),
                $name, $email,

                FormField::addPanel('Informacion Secundaría'),
                $password,$roles

            ];






    }
    public  function  createEntity(string $entityFqcn)
    {
        return parent::createEntity($entityFqcn); // TODO: Change the autogenerated stub
    }

    public function  persistEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {

        $entityInstance->setPassword($this->userPasswordEncoder->encodePassword($entityInstance, $entityInstance->getPassword()));

        parent::persistEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
    }
    public function updateEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {

       // dd($entityInstance);

        $entityInstance->setPassword($this->userPasswordEncoder->encodePassword($entityInstance, $entityInstance->getPassword()));



        parent::updateEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
    }
    public function configureActions(Actions $actions): Actions
    {
        return $actions

            ->setPermission(Action::INDEX, 'ROLE_ADMIN')
            ->setPermission(Action::NEW, 'ROLE_ADMIN')
            ->setPermission(Action::EDIT,'ROLE_ADMIN');
        // ...
        // this will forbid to create or delete entities in the backend

    }
}
